little endian
64kB ram
//			0000-3FFF: fixed rom
//			4000-7FFF: banked rom
//			8000-EFFF: banked ram
//			F000-FEFF: fixed ram
0000-7FFF: rom
8000-FEFF: ram
FF00-FFFF: stack
# you CAN write to rom, the difference is that it's where programs are loaded
# it's also a way to keep things tidier, saying "hey programs should go here and other stuff there"

registers (8b):
A
B
C
D
special registers:
H  (8b) \__ HL (16b)
L  (8b) /
F   =>  0000pscz (Parity, Sign, Carry, Zero)
PC (16b)
SP (8b)


conditions:
0: none
1: zero
2: carry
3: not zero


display:
256x256
64kB VRAM
0x0000-0x2000: screen data (one bit per pixel, with gb-like "squares")
updated every 65536 clock cycles
# TODO: turn the display to sprite-based, maybe colours but idk


cram:
"control ram": contains settings for the computer
accessed using ldh instruction
256 bytes
//			00: rom bank / ram bank (4bit each)
10: exception handle mode
11: \__ exception handler address (little endian)
12: /
80: input (one bit per key)
F0: cycle counter (low)		\__ when this reaches 0000 the screen updates
F1: cycle coutner (high)	/


exceptions:
errors caused by:
    + invalid opcode
when one occurs, it is handled depending on the value of the exception handle mode register in CRAM (addr 0x10):
    + halt (0x01, the default) will stop the CPU
    + ignore (0x00) will skip the exception as if it didn't occur
    + handle (0x02) will perform some operations before jumping to the address in the exception handler register (0x11-0x12)
the handler will (in order):
    + set the exception mode to halt, so the user will have to reset it before jumping back
    + push the program counter (PC) to the stack
    + jump to the address (it is NOT a call. you can't just use RET)


#ADD_OPCODE:
instructions:
#sys instructions
00000000 => nop
00000001 => stop
00000010 => halt
000001xx => jp   [condition] &imm
011100xx => jp   [condition] (HL)
110001xx => jr   [condition] %imm
000010xx => call [condition] &imm
000111xx => call [condition] (HL)
000011xx => ret  [condition]
00011000 => push HL
00011001 => push AB
00011010 => pop HL
00011011 => pop AB

#ALU instructions
001000xx => add A,reg
001001xx => sub A,reg
00010011 => add A,%imm
00010101 => sub A,%imm
11000000 => add HL,&imm
11000001 => sub HL,&imm
00101000 => and A,%imm
001010xx => and A,reg
001011xx => xor A,reg
00110000 => or  A,%imm
001100xx => or  A,reg
001101xx => inc reg
001110xx => dec reg
00111100 => inc HL
00111101 => inc SP
00111110 => dec HL
00111111 => dec SP
10000000 => cmp A,%imm
100000xx => cmp A,reg
011101xx => not reg
011110xx => ror reg
011111xx => rol reg
00010100 => add HL,AB
101010xx => adc A,reg

#bitwise
10010xxx => bit x,A
10011xxx => res x,A
10100xxx => set x,A
10111xxx => flag x #except for flag 0 and flag 1 which don't exist

#loads
0100xxyy => ld reg2,reg1
010100xx => ld reg,%imm
00010001 => ld A,H
00010010 => ld A,L
01011110 => ld H,A
01011111 => ld L,A
010101xx => ld reg,(HL)
010110xx => ld (HL),reg
01011100 => ld HL,&imm
01011101 => ld HL,AB
11000010 => ld AB,HL
011000xx => ld (&imm),reg
011001xx => ld reg,(&imm)
011010xx => ldi reg,(HL)
011011xx => ldi (HL),reg
100001xx => ldd reg,(HL)
100010xx => ldd (HL),reg

#vram
101011xx => stv (&imm),reg
101100xx => ldv reg,(&imm)
10110100 => stv (HL),A
10110101 => stv (HL+),A
10110110 => stv (HL-),A
10110111 => ldv A,(HL)
10001100 => ccv (HL),(&imm)
10001101 => ccr (HL),(&imm)
10001110 => ccv (HL),(AB)
10001111 => ccr (HL),(AB)

#cram
00010110 => ldh (%imm),A
00010111 => ldh A,(%imm)

#unused (65)
00000011
00010000
01000000
01000101
01001010
01001111
1011100x
11000011
11001000+



todo:
more flags
inc immediate
more operations on hl
other cram settings
ldv A,(HL+/-)
banking?
opzione "stack mode": a seconda del valore cambia qualcosa lo stack, ex 00 => stack = 0xff00 + SP, 01 => stack Ã¨ a tutta la memoria
